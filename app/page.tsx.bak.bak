'use client';

import { useEffect, useRef, useState } from 'react';
import { useRouter } from 'next/navigation';
import Header from '@/components/Header';
import LanguageSelector from '@/components/LanguageSelector';
import ProgressSteps from '@/components/ProgressSteps';
import UpgradeModal from '@/components/UpgradeModal';

export default function HomePage() {
  const router = useRouter();
  const [input, setInput] = useState('');
  const [mode, setMode] = useState<'auto' | 'text' | 'image' | 'video'>('auto');
  const [uiLang, setUiLang] = useState('en');
  const [isPaid, setIsPaid] = useState(false);
  const [busy, setBusy] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => { inputRef.current?.focus(); }, []);

  async function submit() {
    if (!input.trim()) return;
    setBusy(true);
    try {
      const res = await fetch('/api/analyze', {
        method: 'POST',
        headers: {
          'content-type': 'application/json',
          ...(isPaid ? { 'x-paid-tier': process.env.NEXT_PUBLIC_PAID_TIER_SECRET ?? '' } : {})
        },
        body: JSON.stringify({
          input,
          mode,
          uiLang,
          includeCounterEvidence: true,
          timeRange: '30d',
          depth: 'quick'
        })
      });
      if (res.status === 429) {
        const url = new URL(window.location.href);
        url.searchParams.set('upsell', '1');
        window.location.href = url.toString();
        return;
      }
      if (!res.ok) {
        const t = await res.text();
        alert(`Error: ${res.status} ${t}`);
        setBusy(false);
        return;
      }
      const { id } = await res.json();
      router.push(`/analysis/${id}`);
    } catch (e: any) {
      alert(e?.message ?? 'Unknown error');
      setBusy(false);
    }
  }

  return (
    <main className="min-h-screen">
      <Header />

      {/* Hero */}
      <section className="px-4">
        <div className="mx-auto max-w-3xl pt-2 sm:pt-6">
          {/* Search box container */}
          <div
            className="rounded-full border border-slate-200 bg-white
                       shadow-sm hover:shadow-md transition-shadow
                       px-4 sm:px-6 py-3 sm:py-4 flex items-center gap-2"
            role="search"
            aria-label="QikVerify search"
          >
            {/* Mode selector (small, secondary) */}
            <div className="hidden sm:flex items-center gap-1 pr-2 mr-1 border-r border-slate-200">
              {(['auto','text','image','video'] as const).map(m => (
                <button
                  key={m}
                  onClick={() => setMode(m)}
                  className={`px-3 py-1.5 text-sm rounded-full transition
                    ${mode === m
                      ? 'bg-slate-100 text-slate-900'
                      : 'text-slate-600 hover:bg-slate-50'}`}
                  aria-pressed={mode === m}
                  aria-label={`Set mode to ${m}`}
                >
                  {m[0].toUpperCase() + m.slice(1)}
                </button>
              ))}
            </div>

            {/* Big single-line input */}
            <label htmlFor="claim" className="sr-only">Paste a link or text</label>
            <input
              id="claim"
              ref={inputRef}
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Paste a link or write a short claim…"
              className="flex-1 min-w-0 bg-transparent outline-none
                         text-lg sm:text-xl leading-7 placeholder:text-slate-400"
              onKeyDown={(e) => { if (e.key === 'Enter') submit(); }}
              aria-label="Paste a link or text to verify"
            />

            {/* Right controls: language + paid toggle + submit */}
            <div className="hidden sm:flex items-center gap-3">
              <LanguageSelector />
              <label className="flex items-center gap-2 text-sm text-slate-700">
                <input
                  type="checkbox"
                  className="h-5 w-5 accent-indigo-600"
                  checked={isPaid}
                  onChange={(e) => setIsPaid(e.target.checked)}
                />
                Paid
              </label>
            </div>

            <button
              onClick={submit}
              disabled={busy || !input.trim()}
              className="ml-auto inline-flex justify-center items-center rounded-full
                         bg-indigo-600 hover:bg-indigo-700 active:bg-indigo-800
                         text-white text-base sm:text-lg font-semibold
                         px-4 sm:px-5 py-2.5 transition disabled:opacity-50 disabled:cursor-not-allowed"
              aria-label="Check evidence"
            >
              {busy ? 'Checking…' : 'Check'}
            </button>
          </div>

          {/* Helper row for mobile (language & paid) */}
          <div className="mt-3 flex items-center justify-between sm:hidden">
            <div className="flex items-center gap-3">
              <LanguageSelector />
              <label className="flex items-center gap-2 text-sm text-slate-700">
                <input
                  type="checkbox"
                  className="h-5 w-5 accent-indigo-600"
                  checked={isPaid}
                  onChange={(e) => setIsPaid(e.target.checked)}
                />
                Paid
              </label>
            </div>
            <button
              type="button"
              onClick={() => setInput('')}
              className="text-sm text-slate-600 hover:text-slate-900 underline underline-offset-2"
            >
              Clear
            </button>
          </div>

          {/* Tip + subtle progress shell */}
          <div className="mt-6 flex items-center justify-between text-slate-600">
            <div className="text-sm sm:text-base">
              <span className="font-medium">Tip: </span> Works in any language.
            </div>
            <div className="hidden sm:block">
              <ProgressSteps stage="idle" />
            </div>
          </div>
        </div>
      </section>

      <UpgradeModal />
    </main>
  );
}
TSX